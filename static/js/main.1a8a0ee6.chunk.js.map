{"version":3,"sources":["components/GetAgentLogs.js","App.js","reportWebVitals.js","index.js"],"names":["withRouter","className","htmlFor","id","name","type","accept","onChange","event","file","target","files","agentLogs","csvData","Papa","parse","download","header","skipEmptyLines","forceUniformNewline","step","row","push","data","complete","results","console","log","length","chunks","filter","message","includes","chunkMessages","map","a","newLog","i","indexOf","slice","k","agentLog","j","replace","logs","reducer","previousValue","currentValue","reduce","m","blob","Blob","saveAs","App","path","component","GetAgentLogs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAmFeA,mBA9Ef,WAmEI,OACE,sBAAKC,UAAU,YAAf,UACE,uBAAOC,QAAQ,cAAcD,UAAU,qBAAvC,2DAGA,uBAAOE,GAAG,cAAcC,KAAK,cAAcC,KAAK,OAAOC,OAAO,OAAOC,SAtEzD,SAACC,GACf,IACIC,EADWD,EAAME,OACDC,MAAM,GAEpBC,EAAY,GAEZC,EAAQ,GAEZC,IAAKC,MAAMN,EAAM,CACbO,UAAU,EACVC,QAAQ,EACRC,gBAAgB,EAChBC,qBAAqB,EACrBC,KAAM,SAASC,GACXR,EAAQS,KAAKD,EAAIE,OAErBC,SAAU,SAASC,GACfC,QAAQC,IAAI,WAAYd,EAAQe,OAAQ,YAexC,IAbA,IAAIC,EADGhB,EACWiB,QAAO,SAAAtB,GAAK,OAAIA,EAAMuB,QAAQC,SAAS,sBAErDC,EAAgBJ,EAAOK,KAAK,SAAAC,GAC5B,IAAIC,EAAM,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAGJ,QAChB,GAAIK,EAAQ,CACZ,IAAIC,EAAID,EAAOE,QAAQ,cAAgB,GACvC,OAAOF,EAAOG,MAAMF,GAEpB,MAAO,MAIPG,EAAI,EACFA,EAAIP,EAAcL,SAAWK,EAAcO,GAAGR,SAAS,YAC7DQ,IAEA,IAAK,IAAIH,EAAIG,EAAGH,EAAIJ,EAAcL,OAAQS,IAAK,CAE/C,IAAII,EAAW,GACXC,EAAIL,EAER,GACIJ,EAAcS,GAAKT,EAAcS,GAAGC,QAAQ,MAAO,IACnDV,EAAcS,GAAKT,EAAcS,GAAGC,QAAQ,OAAQ,SACpDF,EAASnB,KAAKW,EAAcS,IAC5BA,UACKA,EAAIT,EAAcL,SAAWK,EAAcS,GAAGV,SAAS,YAChEpB,EAAUU,KAAKmB,GAEfJ,EAAIK,EAAI,EAIR,IAFA,IACIE,EADEC,EAAU,SAACC,EAAeC,GAAhB,OAAiCD,EAAgBC,GAExDV,EAAI,EAAGA,EAAIzB,EAAUgB,OAAQS,IAAK,CAG3C,IAAIG,GADJI,EAAOhC,EAAUyB,GAAGW,OAAOH,IACdP,QAAQ,aAAe,EAChCW,EAAIL,EAAKN,QAAQ,iBAAmB,EACxCM,EAAOA,EAAKL,MAAMC,EAAGS,GACrB,IAAIC,EAAO,IAAIC,KAAK,CAACP,GAAO,CAAEvC,KAAM,6BACpC+C,iBAAOF,EAAD,oBAAoBb,EAApB,sB,QC1DP,SAASgB,IACtB,OACE,cAAC,IAAD,UACE,8BAGE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,iBAAiBC,UAAWC,IACxC,cAAC,IAAD,CAAOF,KAAK,IAAIC,UAAWC,WChBrC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAD,MAEFgB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1a8a0ee6.chunk.js","sourcesContent":["import './GetAgentLogs.css';\nimport { withRouter } from 'react-router-dom';\nimport Papa from 'papaparse';\nimport { saveAs } from 'file-saver';\n\nfunction GetAgentLogs() {\n\n    const getLogs = (event) => {\n      var csvInput = event.target;\n      var file = csvInput.files[0];\n      let data;\n        let agentLogs = [];\n        \n        var csvData=[];\n        \n        Papa.parse(file, {\n            download: true,\n            header: true,\n            skipEmptyLines: true,\n            forceUniformNewline: true,\n            step: function(row) {\n                csvData.push(row.data);\n            },\n            complete: function(results) {\n                console.log('Complete', csvData.length, 'records.'); \n                data = csvData;\n                let chunks = data.filter(event => event.message.includes('Agent log chunk'));\n                // let chunksStartIndexes = data.filter(ev, i => ev.message.includes('\"_logs:\"'));\n                let chunkMessages = chunks.map( a => {\n                    let newLog = a?.message;\n                    if (newLog) {\n                    let i = newLog.indexOf('log chunk:') + 10; \n                    return newLog.slice(i);\n                    } else {\n                    return \"\";\n                    }\n                    \n                });\n                let k = 0;\n                while(k < chunkMessages.length && !chunkMessages[k].includes('\"_logs\"')) {\n                k++;\n                }\n                for (let i = k; i < chunkMessages.length; i++) {\n    \n                let agentLog = [];\n                let j = i;\n                \n                do {\n                    chunkMessages[j] = chunkMessages[j].replace(/\\n/g, \"\");\n                    chunkMessages[j] = chunkMessages[j].replace(/\\\\ /g, \"\\\\\\\\ \");\n                    agentLog.push(chunkMessages[j]);\n                    j++;\n                } while (j < chunkMessages.length && !chunkMessages[j].includes('\"_logs\"'));\n                agentLogs.push(agentLog);\n                \n                i = j - 1;\n                }\n                const reducer = (previousValue, currentValue) => previousValue + currentValue;\n                let logs;\n                for (let i = 0; i < agentLogs.length; i++) {\n                \n                logs = agentLogs[i].reduce(reducer);\n                let k = logs.indexOf('\"_logs\": ') + 9;\n                let m = logs.indexOf('\"_rolledLogs\"') - 5;\n                logs = logs.slice(k, m);\n                var blob = new Blob([logs], { type: \"text/plain;charset=utf-8\" });\n                saveAs(blob, `agent_log_${i}.txt`);\n                }\n            }\n        });\n    }\n\n    return (\n      <div className=\"container\">\n        <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\n            Choose csv to get txt file(s) with agent logs\n        </label>\n        <input id=\"file-upload\" name=\"file-upload\" type=\"file\" accept=\".csv\" onChange={getLogs}></input>\n        \n      </div>\n    );\n  }\n  \nexport default withRouter(GetAgentLogs);\n\n//        <ToastContainer />\n// import { ToastContainer } from 'react-toastify'\n// import 'react-toastify/dist/ReactToastify.css'","import React from 'react';\nimport GetAgentLogs from './components/GetAgentLogs';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        {/* A <Routes> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/get-log-chunk\" component={GetAgentLogs} />\n          <Route path=\"/\" component={GetAgentLogs} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}